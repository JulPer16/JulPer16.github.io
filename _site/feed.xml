<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-08-02T08:51:33-05:00</updated><id>/feed.xml</id><title type="html">Julia’s Website</title><subtitle>This is Julia Perlkvist's website designated for the course 1DV022 at Linnaeus University under the UDM program.</subtitle><entry><title type="html">Reflections</title><link href="/jekyll/update/2020/08/02/reflections.html" rel="alternate" type="text/html" title="Reflections" /><published>2020-08-02T06:54:21-05:00</published><updated>2020-08-02T06:54:21-05:00</updated><id>/jekyll/update/2020/08/02/reflections</id><content type="html" xml:base="/jekyll/update/2020/08/02/reflections.html">&lt;h2&gt;Thoughts on pre-compiling CSS&lt;/h2&gt;

&lt;p&gt;Since I’ve had previous experience with writing CSS it has been a little bit of an adjustment to use this new
method of pre-compiling. It was a little bit tricky at first to figure out which things went where, not to
mention trying to find all the files I needed and properly linking them to make sure everything would be
included in the browser. Despite struggling with this new tool, however, I can abslutely see the value in
using this method and look forward to learning more about it, as I’m sure it will be very helpful when
creating websites in the future!&lt;/p&gt;

&lt;p&gt;I used Sass for pre-compiling CSS, and to do this I first copied the pre-existing scss files as a base. Here
I immediately ran into an issue, as the folder the files were supposedly in was nowhere to be found. I did
manage to solve this problem by using “Inspect element” in the prowser, clicking the style tab, and simply
downloading the files by clicking “Save” on them and then placing them in my own _sass folder. With these files saved, I went thought them and experimented with changing values to see what happened. I did
struggle a bit with getting things to connect properly, but after a while I got everything to work the way I
wanted it to.&lt;/p&gt;

&lt;p&gt;The main obvious pro of using this method is that it’s easy to achieve consistency and it’s much easier to
maintain than writing one’s own CSS code. However it is a bit tricky to learn how Sass relates to CSS and
how to achieve one’s goals, but once you’re past the learning curve it is ultimately a great tool to use.&lt;/p&gt;

&lt;h2&gt;Thoughts on static site generators&lt;/h2&gt;

&lt;p&gt;Static site generators can be useful for quickly and easily throwing together a website for simple purposes
like for instance sharing information with an organization, uploading a photo gallery, or run a blog. The
fact that a lot of things are automatic can be very convenient for these purposes.&lt;/p&gt;

&lt;div class=&quot;trigger&quot;&gt;&lt;a class=&quot;page-link&quot; href=&quot;/blogposts/&quot;&gt;Back to blog posts&lt;/a&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Thoughts on pre-compiling CSS</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="/jekyll/update/2020/07/28/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2020-07-28T14:40:27-05:00</published><updated>2020-07-28T14:40:27-05:00</updated><id>/jekyll/update/2020/07/28/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/update/2020/07/28/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/orgs/1dv022/teams/jp223es/repositories/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>